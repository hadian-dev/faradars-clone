// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Category {
  id       Int                  @id @default(autoincrement())
  createAt DateTime             @default(now())
  updateAt DateTime             @updatedAt
  deleteAt DateTime?
  name     String
  slug     String
  image    String
  parentId Int?                 @unique
  parent   Category?            @relation(name: "parent", fields: [parentId], references: [id])
  ancestor Category?            @relation(name: "parent")
  courses  CategoriesOnCourse[]

  @@map("categories")
}

model Course {
  id          Int                  @id @default(autoincrement())
  createAt    DateTime             @default(now())
  updateAt    DateTime             @updatedAt
  deleteAt    DateTime?
  name        String
  slug        String
  enabled     Boolean              @default(true)
  viewCount   Int                  @default(0)
  rating      Int                  @default(0)
  ratingCount Int                  @default(0)
  duration    String
  price       Float
  imageCover  String
  videoCover  String?
  size        String?
  tags        TagsOnCourse[]
  categories  CategoriesOnCourse[]
  lessons     Lesson[]
  users       UsersOnCourse[]

  @@map("courses")
}

model Lesson {
  id           Int       @id @default(autoincrement())
  createAt     DateTime  @default(now())
  updateAt     DateTime  @updatedAt
  deleteAt     DateTime?
  name         String
  descriptions String
  duration     String?
  video        String?
  images       String[]
  notes        String[]
  practices    String[]
  rating       Int       @default(0)
  ratingCount  Int       @default(0)
  course       Course?   @relation(fields: [courseId], references: [id])
  courseId     Int?

  @@map("lessons")
}

model Tag {
  id       Int            @id @default(autoincrement())
  createAt DateTime       @default(now())
  updateAt DateTime       @updatedAt
  deleteAt DateTime?
  name     String
  slug     String
  courses  TagsOnCourse[]

  @@map("tags")
}

model User {
  id        Int             @id @default(autoincrement())
  createAt  DateTime        @default(now())
  updateAt  DateTime        @updatedAt
  deleteAt  DateTime?
  name      String?
  image     String?
  email     String?         @unique
  phone     String?         @unique
  slug      String?
  biography String?
  grade     String?
  degree    String?
  gender    GenderType
  courses   UsersOnCourse[]

  @@map("users")
}

enum GenderType {
  Man
  Woman
  Unknown
}

model CategoriesOnCourse {
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([courseId, categoryId])
  @@map("categories_on_course")
}

model UsersOnCourse {
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   Int

  @@id([courseId, userId])
  @@map("users_on_course")
}

model TagsOnCourse {
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int
  assignedAt DateTime @default(now())

  @@id([courseId, tagId])
  @@map("tags_on_course")
}
